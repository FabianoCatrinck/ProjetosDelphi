unit uLimiteCreditoCadastro;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Buttons, Vcl.DBCtrls,
  Vcl.Mask;

type
  TfrmLimiteCreditoCadastro = class(TForm)
    Label5: TLabel;
    cboDistribuidor: TDBLookupComboBox;
    Label2: TLabel;
    edtValor: TMaskEdit;
    btnOk: TSpeedButton;
    SpeedButton1: TSpeedButton;
    procedure btnOkClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
  private
    { Private declarations }
    FCodigoProdutor: Integer;
    function ObterDistribuidorPeloCodigo(pCodigoProdutor, pCodigoDistribuidor): Boolean;
  public
    { Public declarations }
    CodigoProdutor: Integer;
  end;

implementation

{$R *.dfm}

uses uDM;

procedure TfrmLimiteCreditoCadastro.btnCancelarClick(Sender: TObject);
begin
  Close;
end;

procedure TfrmLimiteCreditoCadastro.btnOkClick(Sender: TObject);
begin
  if not ObterDistribuidorPeloCodigo(FCodigoProdutor, cboDistribuidor.KeyValue) then
    CadastrarLimiteCredito([cboDistribuidor.KeyValue,
                                                       cboDistribuidor.Text,
                                                       edtValor.Text])
  else
    begin
      MessageDlg('Esse distibuidor já foi adicionado. Verifique', mtInformation, [mbOk], 0);
      Abort;
    end;


//  cdsLimiteCredito.DisableControls;
//  cdsLimiteCredito.First;
//
//  while not cdsLimiteCredito.Eof do
//  begin
//    DM.qryCredito.Append;
//    DM.qryCredito.FieldByName('produtor').AsString := DM.qryProdutor.FieldByName('codigo').AsString;
//    DM.qryCredito.FieldByName('distribuidor').AsString := cdsLimiteCredito.FieldByName('distribuidor').AsString;
//    DM.qryCredito.FieldByName('nomedistribuidor').AsString := cdsLimiteCredito.FieldByName('nomedistribuidor').AsString;
//    DM.qryCredito.FieldByName('valor').AsString := cdsLimiteCredito.FieldByName('valor').AsString;
//    DM.qryCredito.Post;
//
//    cdsLimiteCredito.Next;
//  end;
//
//  cdsLimiteCredito.EnableControls;

  Close;
end;

procedure TfrmLimiteCreditoCadastro.FormShow(Sender: TObject);
begin
  if not DM.qryDistribuidor.Active then
    DM.qryDistribuidor.Open;

  cboDistribuidor.SetFocus;
end;

function TfrmLimiteCreditoCadastro.ObterDistribuidorPeloCodigo(
  pCodigoProdutor, pCodigoDistribuidor: Integer): Boolean;
var
  lQry: TFDQuery;
begin
  lQry := TFDQuery.Create(Self);

  try
    lQry.Connection := DM.FDConnection;
    lQry.SQL.Add('SELECT CODIGO');
    lQry.SQL.Add('FROM CREDITO');
    lQry.SQL.Add('WHERE PRODUTOR = :pProdutor AND DISTRIBUIDOR = :pDistribuidor');

    lQry.ParamByName('pProdutor').AsInteger := pCodigoProdutor;
    lQry.ParamByName('pDistribuidor').AsInteger := pCodigoDistribuidor;

    try
      lQry.Open;

     Result := not lQry.IsEmpty;
   except
      On E:Exception do
      begin
        MessageDlg('Ocoreu o erro ' + E.Message + ' ao obter o distribuidor.', mtInformation, [mbOk], 0);
      end;
    end;
  finally
    lQry.Close;
    FreeAndNil(lQry);
  end;
end;

end.
