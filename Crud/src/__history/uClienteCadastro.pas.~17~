unit uClienteCadastro;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Buttons, FireDAC.Comp.Client,
  Vcl.Mask, Vcl.ExtCtrls;

type
  TfrmClienteCadastro = class(TForm)
    pnlOperacao: TPanel;
    btnCancelar: TSpeedButton;
    btnGravar: TSpeedButton;
    pnlDados: TPanel;
    lblNome: TLabel;
    lblCPFCNPJ: TLabel;
    edtCPFCNPJ: TEdit;
    edtNome: TEdit;
    edtRazaoSocial: TEdit;
    Label1: TLabel;
    edtData: TMaskEdit;
    Label7: TLabel;
    procedure btnCancelarClick(Sender: TObject);
    procedure btnOkClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
  private
    { Private declarations }
    FCodigo: Integer;
    FNome,
    FRazaoSocial,
    FCPFCNPJ: String;
    FDataNascimento: TDateTime;
    FNovoCliente: Boolean;

    function ValidarCampos(): Boolean;
    procedure CadastrarCliente(pCodigo: Integer; pNome, pCPFCNPJ, pRazaoSocial, pDataNascimento: String);
    procedure AlterarCliente(pCodigo: Integer; pNome, pCPFCNPJ, pRazaoSocial, pDataNascimento: String);
    function LimparString(pString: String): String;
  public
    { Public declarations }
    property Codigo: Integer read FCodigo write FCodigo;
    property Nome: String write FNome;
    property RazaoSocial: String write FRazaoSocial;
    property CPFCNPJ: String write FCPFCNPJ;
    property DataNascimento: TDateTime write FDataNascimento;
  end;


implementation

{$R *.dfm}

uses uDM;

procedure TfrmClienteCadastro.AlterarCliente(pCodigo: Integer; pNome,
  pCPFCNPJ, pRazaoSocial, pDataNascimento: String);
var
  lQry: TFDQuery;
begin
  lQry := TFDQuery.Create(Self);

  try
    lQry.Connection := DM.FDConnection;
    lQry.SQL.Add('UPDATE TBCLIENTES');
    lQry.SQL.Add('SET  Cliente  = :pNome,');
    lQry.SQL.Add('     RazaoSocial = :pRazaoSocial,');
    lQry.SQL.Add('     CNPJ = :pCPFCNPJ,');
    lQry.SQL.Add('     CPF = :pCPFCNPJ');
    lQry.SQL.Add('     DtNascimento  = :pDataNascimento');
    lQry.SQL.Add('WHERE codigo = :pCodigo');

    lQry.ParamByName('pCODIGO').AsInteger := pCodigo;
    lQry.ParamByName('pCliente').AsString := pNome;
    lQry.ParamByName('pRazaoSocial').AsString := pRazaoSocial;

    pCPFCNPJ := LimparString(pCPFCNPJ);

    if Length(pCPFCNPJ) = 11 then
      begin
        lQry.ParamByName('pCNPJ').AsString := '';
        lQry.ParamByName('pCPF').AsString := pCPFCNPJ;
      end
    else
      begin
        lQry.ParamByName('pCNPJ').AsString := pCPFCNPJ;
        lQry.ParamByName('pCPF').AsString := '';
      end;

    lQry.ParamByName('pDtNascimento').AsString := pDataNascimento;

    try
      lQry.ExecSQL;
      MessageDlg('Cliente ' + pNome + ' alterado com sucesso!', mtInformation, [mbOk], 0);
    except
      On E:Exception do
      begin
        lQry.Transaction.Rollback;
        MessageDlg('Ocoreu o erro ' + E.Message + ' ao alterar o cliente ' + pNome, mtInformation, [mbOk], 0);
        Abort;
      end;
    end;
  finally
    FreeAndNil(lQry);
  end;
end;

procedure TfrmClienteCadastro.btnCancelarClick(Sender: TObject);
begin
  Close;
end;

procedure TfrmClienteCadastro.btnOkClick(Sender: TObject);
begin
  if not ValidarCampos() then
    Abort
  else
    if FNovoCliente then
      CadastrarCliente(FCodigo, edtNome.Text, edtCPFCNPJ.Text, edtRazaoSocial.Text, edtData.Text)
    else
      AlterarCliente(FCodigo, edtNome.Text, edtCPFCNPJ.Text, edtRazaoSocial.Text,
      edtData.Text);

  Close;
end;

procedure TfrmClienteCadastro.CadastrarCliente(pCodigo: Integer; pNome, pCPFCNPJ, pRazaoSocial, pDataNascimento: String);
var
  lQry: TFDQuery;
begin
  lQry := TFDQuery.Create(Self);

  try
    lQry.Connection := DM.FDConnection;
    lQry.SQL.Add('INSERT INTO TBCLIENTES (IdCliente, Cliente, RazaoSocial, CNPJ, CPF, DtNascimento)');
    lQry.SQL.Add('VALUES (:pCodigo, :pCliente, :pRazaoSocial, :pCNPJ, :pCPF, :pDtNascimento)');

    lQry.ParamByName('pCODIGO').AsInteger := pCodigo;
    lQry.ParamByName('pCliente').AsString := pNome;
    lQry.ParamByName('pRazaoSocial').AsString := pRazaoSocial;

    pCPFCNPJ := LimparString(pCPFCNPJ);

    if Length(pCPFCNPJ) = 11 then
      begin
        lQry.ParamByName('pCNPJ').AsString := '';
        lQry.ParamByName('pCPF').AsString := pCPFCNPJ;
      end
    else
      begin
        lQry.ParamByName('pCNPJ').AsString := pCPFCNPJ;
        lQry.ParamByName('pCPF').AsString := '';
      end;

    lQry.ParamByName('pDtNascimento').AsString := pDataNascimento;

    try
      lQry.ExecSQL;
      MessageDlg('Cliente ' + pNome + ' gravado com sucesso!', mtInformation, [mbOk], 0);
    except
      On E:Exception do
      begin
        lQry.Transaction.Rollback;
        MessageDlg('Ocoreu o erro ' + E.Message + ' ao inserir o cliente ' + pNome, mtInformation, [mbOk], 0);
        Abort;
      end;
    end;
  finally
    FreeAndNil(lQry);
  end;
end;

procedure TfrmClienteCadastro.FormShow(Sender: TObject);
begin
  if edtNome.CanFocus then
    edtNome.SetFocus;

  if FCodigo = 0 then
    begin
      FCodigo := DM.ObterCodigoTabela('IdCliente ', 'TBCLIENTES');
      FNovoCliente := True;
    end
  else
    begin
      FNovoCliente := False;
      edtNome.Text := FNome;
      edtCPFCNPJ.Text := FCPFCNPJ;
      edtRazaoSocial.Text := FRazaoSocial;
      edtData.Text := DateToStr(FDataNascimento);
    end;
end;

function TfrmClienteCadastro.LimparString(pString: String): String;
var
  lResult: String;
begin
  lResult := StringReplace(pString, '-', '', [rfReplaceAll]);
  lResult := StringReplace(lResult, '.', '', [rfReplaceAll]);
  lResult := StringReplace(lResult, '/', '', [rfReplaceAll]);
  Result := lResult;
end;

function TfrmClienteCadastro.ValidarCampos(): Boolean;
var
  lCPFCNPJ: String;
begin
  Result := False;

  if edtNome.Text = '' then
    begin
      MessageDlg('O campo nome não pode ficar em branco. Verifique.', mtInformation, [mbOk], 0);
      edtNome.SetFocus;
    end
  else
    if Length(edtNome.Text) < 3 then
      begin
        MessageDlg('O campo nome não é válido. Verifique.', mtInformation, [mbOk], 0);
        edtNome.SetFocus;
      end
    else
      begin
        //Removendo a máscara
        lCPFCNPJ := StringReplace(StringReplace(StringReplace(edtCPFCNPJ.Text, '.', '', []), '-', '', []), '/', '', []);

        if Length(lCPFCNPJ) < 11 then
          begin
            MessageDlg('O tamanho do campo CPF/CNPJ não é válido. Verifique.', mtInformation, [mbOk], 0);
            edtCPFCNPJ.SetFocus;
          end
        else
          if edtRazaoSocial.Text = '' then
            begin
              MessageDlg('O campo razão social não pode ficar em branco. Verifique.', mtInformation, [mbOk], 0);
              edtRazaoSocial.SetFocus;
            end
          else
            if Length(edtRazaoSocial.Text) < 3 then
              begin
                MessageDlg('O conteúdo do campo razão social não é válido. Verifique.', mtInformation, [mbOk], 0);
                edtRazaoSocial.SetFocus;
              end
            else
              try
                StrToDate(edtData.Text);
                Result := True;
              except
                MessageDlg('A data de nascimento não é válida. Verifique.', mtInformation, [mbOk], 0);
                edtData.SetFocus;
              end;
      end;
end;

end.
